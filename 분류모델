분류모델 : 레이블이 달린 학습 데이터로 학습한 후에 새로 입력된 데이터가 학습했던 어느 그룹에 속하는 지를 찾아내는 방법

분류모델종류
1. KNN 알고리즘 : K Nearest Neighbor(KNN) 기계 학습 분야에서 가장 간단한 알고리즘이다.
                 분류하고자 하는 데이터와 가장 가까운 k개의 이웃을 선택하여 분류한다.
                 기계학습의 기본 알고리즘이다.
                 k개의 변수를 가지고 있다.
                 유클리드 거리를 사용하여 테스트 데이터와 각 학습 데이터의 행 사이의 거리를 계산한다.
                 
                 <장점>
                 - 이해하기 쉬운 모델이다
                 - 많은 조정을 하지 않아도 좋은 성능을 발휘한다
                 - 빠르게 모델을 만들수 있다
                 - 복잡한 방법을 적용하기 전에 좋은 시작점으로 시작한다
                 
                 <단점>
                 - 적절한 k 선택이 필요하다.
                 - 훈련데이터가 매우 크면 예측이 느리고 잘 작동 하지 않음
                 - Nominal data 속성과 누락 데이터는 추가 처리가 필요하다
                 
                 <적용 분야>
                 - 얼굴 및 필기체 인식
                 - 질병탐지
                 - 스팸 메일 분류
                 - 금융 애플리케이션
                 - 엔터테인먼트 애플리케이션
                 
                 
                 과연 KNN과 linear regression의 차이점은?
                 - regression은 정확한 값을 예측한다 반면에 KNN은 cold, hot으로 분류한다.  즉 KNN은 두가지 그룹으로 구분한다.
                 
                 
                
분류 모델 성능 평가 지표
-Train dataset/Test dataset : Train dataset은 모델을 훈련하는데 사용하는 실제 데이터셋이며 Test dataset은 모델 평가에 사용하는 데이터셋을 이야기한다
                              80:20의 비율로 분할하여 사용
                              
                              +python에서 sklearn 라이브러리를 이용하여 분할
                              
                              from sklearn.model_selection import train_test_split
                              x_train,x_test,y_train,y_test=
                              Train_test_split(training_points,training_labels,test_size=0.2,random_state=4)
                              
                              //test_size=0.2 -> 20의 test의 데이터셋으로 구분한다
                              //random_state=4  ->  하이퍼 파라미터를 사용하지 않는 한 데이터를 무작위로 할당한다
                              
                            
- 분류 정확도 : Confusion matrix, Accuracy, Error rate, Precision, Recall, F measure
               
               +python에서 sklearn 라이브러리 사용
               
               from sklearn.metrics import confusion_matrix
               from sklearn import metrics
               
               
              - Confusion matrix : 실제 값과 일치하는지 여부에 따라 예측을 분류하는 테이블
                                   가장 일반적인 성능 측정은 한 클래스와 다른 클래스를 구별하는 모델의 능력을 고려 -> 관심클래스는 positive, 다른 것들은 negative
                                   
                                   +from sklearn.metrics import confusion_matrix
                                   print(confusion_matrix(y_test,guesses))
                                   
              - Accuracy : 2*2 confusion matrix를 사용하여 예측 정확도(success rate이라고도 함)를 정의 할 수 있다.
              
              - Error rate : 오류율 또는 잘못 분류된 예의 비율은 다음과 같이 지정
                           = 1-accuracy
                           
              - Precision : 진정으로 긍정인 positive 사례의 비율로 정의, 모델이 positive 클래스를 예측할 때 얼마나 자주 올바른지
              
              - Recall : 결과가 얼마나 정확한지를 측정
              
              - F-measure : 얼마나 잘 분류되었는가를 구분
                            = 2 * Precision * Recall / (Precision + Recall)
              
              
     
                              

                 
          
